Features and it's PowerShell commands we've shortlisted

1.Detect OS version installation date and licence.

$os = Get-WmiObject -Class Win32_OperatingSystem
$version = $os.Version
$installDate = $os.ConvertToDateTime($os.InstallDate)
$license = (Get-WmiObject -Query "SELECT * FROM SoftwareLicensingService").OA3xOriginalProductKey

$osInfo = @{
	Version = $version
	InstallDate = $installDate
	License = $license
}

$osInfo

2.Last Windows update

$InstallDate = (Get-WmiObject -Class Win32_OperatingSystem).ConvertToDateTime((Get-WmiObject -Class Win32_OperatingSystem).InstallDate)
$LastUpdate = Get-Hotfix | Where-Object { $_.InstalledOn } | Select-Object -First 1
if ($InstallDate -ne $LastUpdate.InstalledOn) {
    Write-Output "Last Update Date: $($LastUpdate.InstalledOn)"
    Write-Output "Last Update Version: $($LastUpdate.HotFixID)"
    Write-Output "UPDATED"
}
else {
    Write-Output "Last Update Date: $($LastUpdate.InstalledOn)"
    Write-Output "Last Update Version: $($LastUpdate.HotFixID)"
    Write-Output "NOT UPDATED"
}

3.Antivirus installation licensed or not

$antivirus = Get-WmiObject -Namespace "root\SecurityCenter2" -Class AntivirusProduct
if ($antivirus) {
	$name = $antivirus.DisplayName
	$installedDate = $antivirus.InstallDate
	$expirationDate = $antivirus.ExpireDate
	$licensed = $antivirus.IsLicenseValid

	Write-Host "Antivirus Name: $name"
	Write-Host "Installation Date: $installedDate"
	Write-Host "Expiration Date: $expirationDate"
	Write-Host "Licensed: $licensed"
}
else {
	Write-Host "No antivirus software found on the system."
}


4.Number of USB drivers

(Get-PnpDevice -Class USB -Status OK).Count

5.Number of normal account and Admin user Account

$adminUsers = Get-LocalUser | Where-Object { $_.Enabled -eq $true -and $_.PrincipalSource -eq 'Local' -and $_.IsMemberOf -contains 'Administrators' }
$normalUsers = Get-LocalUser | Where-Object { $_.Enabled -eq $true -and $_.PrincipalSource -eq 'Local' -and $_.IsMemberOf -notcontains 'Administrators' }

$adminUserCount = $adminUsers.Count
$normalUserCount = $normalUsers.Count

Write-Host "Number of logged-in admin users: $adminUserCount"
Write-Host "Number of logged-in normal users: $normalUserCount"

6.Detection of critical file modification

Get-WinEvent -FilterHashtable @{LogName='Security'; ID=4663}

7.Number of .LNK files in home directory

(Get-ChildItem -Path C:\Users -Filter *.lnk -Recurse -File).Count

8.Number of PE files in home directory

(Get-ChildItem -Path C:\Users -Filter *.exe -Recurse -File).Count

9.Number of DLL files in home directory

(Get-ChildItem -Path C:\Users -Filter *.dll -Recurse -File).Count

10.Number of hidden files 

Get-ChildItem -Path '*' -Recurse -File -Attributes Hidden

11.Number of times access privilege attempted

Get-WinEvent -FilterHashtable @{LogName='Security'; ID=4625} | Format-List -Property *

12.Tracing of root files of running process which fall under home directory

Get-WmiObject Win32_Process | Where-Object {$_.ExecutablePath -like "C:\*"} | ForEach-Object {
	$processName = $_.Name
	$rootFile = (Split-Path -Path $_.ExecutablePath -Parent)
	"$processName : $rootFile"
}

13.Number of failed attempts while Admin date and time

Get-WinEvent -FilterHashtable @{LogName='Security'; ID=4625} | Select-Object -Property *

14.Number of TCP connection and their name

$tcpConnections = Get-NetTCPConnection
$tcpConnectionCount = $tcpConnections.Count

Write-Host "Number of TCP connections: $tcpConnectionCount"

$tcpConnections | ForEach-Object {
	$connection = $_
	$process = Get-Process -Id $connection.OwningProcess
	$connection | Add-Member -NotePropertyName "ProcessName" -NotePropertyValue $process.Name -PassThru
} | Select-Object -Property LocalAddress, LocalPort, RemoteAddress, RemotePort, State, OwningProcess, ProcessName

15.Number of startup programs

Get-CimInstance -Query "SELECT * FROM Win32_StartupCommand"
16.	List of network services and ports
$maliciousPorts = @(21, 22, 23, 25, 80, 110, 135, 137,138 ,139,410, 445)
$runningPorts = (Get-NetTCPConnection | Select-Object -ExpandProperty LocalPort)
$maliciousRunningPorts = $runningPorts | Where-Object { $maliciousPorts -contains $_ }

if ($maliciousRunningPorts) {
	$maliciousRunningPorts | Group-Object | ForEach-Object {
    	"Potentially malicious port $($_.Name) is running. Count: $($_.Count)"
	}
} else {
	"No potentially malicious ports are running."
}

  
